-- The basic operators:
let add x y = x + y --let add = \x -> \y -> x + y
let sub x y = x - y --let sub = \x -> \y -> x - y
let mul x y = x * y --let mul = \x -> \y -> x * y
let div x y = x / y --let div = \x -> \y -> x / y
let eq x y = x == y --let eq = \x -> \y -> x == y

-- Let-rec for easy recursive definitions:
let rec factorial n = if (n == 0) then 1 else n * (factorial (n-1))

-- Let-rec bindings is syntactic sugar for the fixpoint operator:
let factorial_fix = fix (\factorial n -> if (n == 0) then 1 else (n * (factorial (n-1))))