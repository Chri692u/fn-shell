-- Let bindings
let x = 0
let b = True

-- Lambda abstractions
let succ = (\x -> x + 1)

-- syntactic sugar for lambda abstractions
let succ' x = x + 1

-- multiple arguments
let square x y = x * y

-- application
let result = square(5)

-- If then else
let f b x1 x2 = if b then x1 else x2

-- Let-rec for easy recursive definitions:
let rec factorial n = if (n == 0) then 1 else n * (factorial (n-1))

-- Let-rec bindings is syntactic sugar for the fixpoint operator:
let factorial_fix = fix (\factorial n -> if (n == 0) then 1 else (n * (factorial (n-1))))

